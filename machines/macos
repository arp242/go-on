#!/usr/bin/env zsh
[ "${ZSH_VERSION:-}" = "" ] && echo >&2 "Only works with zsh" && exit 1
setopt err_exit no_unset pipefail

version=12 # "Montery"
ssh_port=9924
memory=4G
cores=1
threads=2
arch=x86_64
cpu=(
	vendor=GenuineIntel
	+hypervisor
	+invtsc
	+kvm_pv_eoi
	+kvm_pv_unhalt
)

start-machine() {
	# TODO: always enable for now because it always wants to boot from "EFI" in
	#       the boot loader, which doesn't work and I need to manualy select
	#       "Untitled".
	# https://unix.stackexchange.com/questions/52996/how-to-boot-efi-kernel-using-qemu-kvm
	local use_display=1 # ${1:-0}
	local iso=${2:-}
	local img=$root/disks/$machine-$version.qcow2
	local pid=$root/run/$machine-$version.pid
	local ssh_ip=$(resolve-host $ssh_host)
	local procname=goon-$machine

	local bootimg=$root/disks/macos-12-OpenCore.qcow2
	local efi=$root/disks/macos-12-OVMF_CODE.fd
	local efi_vars=$root/disks/macos-12-OVMF_VARS-1024x768.fd

	has-qemu $arch || return 1

	mkdir -p $root/run
	if has-pid $pid $procname; then
		print "$progname: $machine already started; nothing to do"
		return 0
	fi

	# No display unless this script is called directly.
	local display=(-display 'none')
	(( $use_display )) && display=(
		-display    'gtk,grab-on-hover=off,zoom-to-fit=off'
		-device     'VGA,vgamem_mb=64'
		# Prevents the mouse from being grabbed when clicking in the guest; QEMU
		# will be able to report the mouse position without having to grab it.
		# Also overrides PS/2 mouse emulation when activated.
		-device     'usb-tablet,bus=input.0'
	)

	# Add installer CD if it exists
	local install=()
	[[ -n $iso ]] && install=(
		-cdrom   "$iso"
		-boot    'd'
	)

	print "$progname: starting QEMU VM from $img:t"
	local cmd=(qemu-system-$arch
		-name       "$machine,process=$procname"
		-pidfile    "$pid"
		-enable-kvm
		-machine    'q35,smm=off,vmport=off'
		-rtc        'base=localtime,clock=host,driftfix=slew'
		-m          "$memory"
		-smp        "cores=$cores,threads=$threads,sockets=1"
		-cpu        "host,kvm=on$( (( $#cpu )) && print ',' )${(j:,:)cpu}"
		-device     'usb-ehci,id=input'
		-device     'virtio-balloon'
		-smbios     "type=2,manufacturer=goon,product=goon,version=3.16,serial=0xDEADBEEF,location=arp242.net,asset=$machine"
		# Hard drive
		-device     'virtio-blk-pci,drive=SystemDisk'
		-drive      "id=SystemDisk,if=none,file=$img,format=qcow2"
		# Network
		-device     'virtio-net,netdev=nic'
		-netdev     "user,id=nic,hostname=$machine,hostfwd=tcp:$ssh_ip:$ssh_port-:22"

		$display
		$install

		# Need to use AHCI, add bootloader image.
		-device     'ahci,id=ahci'
		-device     'ide-hd,bus=ahci.0,drive=BootLoader,bootindex=1'
		-drive      "id=BootLoader,if=none,format=qcow2,file=$bootimg"
		# EFI
		-global     'driver=cfi.pflash01,property=secure,value=on'
		-drive      "if=pflash,format=raw,unit=0,file=$efi,readonly=on"
		-drive      "if=pflash,format=raw,unit=1,file=$efi_vars"
		# Old "copy protection" that's more of an easter egg thesedays.
		-device     'isa-applesmc,osk=ourhardworkbythesewordsguardedpleasedontsteal(c)AppleComputerInc'

		# Random stuff from quickemu; not sure what's needed, but keep it for now.
		-no-hpet
		-global     'kvm-pit.lost_tick_policy=discard'
		-global     'ICH9-LPC.disable_s3=1'
		-device     'virtio-rng-pci,rng=rng0'
		-device     'usb-kbd,bus=input.0'
		-object     'rng-random,id=rng0,filename=/dev/urandom'

		-global     'nec-usb-xhci.msi=off'
	)
	${cmd[@]} &
}

if [[ $zsh_eval_context = 'toplevel' ]]; then
	source $0:P:h:h/goon
	read-machine $0:P:t
	start-machine 1
fi
