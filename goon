#!/usr/bin/env zsh
[ "${ZSH_VERSION:-}" = "" ] && echo >&2 "Only works with zsh" && exit 1
setopt err_exit no_unset pipefail extended_glob

root=$0:P:h
progname=$0:t
dir=$PWD:t

for f in $root/cmd/*; source $f

main() {
	has-commands || exit $?
	(( $#argv == 0 )) && help ''

	# Check for -h/-help in any position.
	local has_help=0
	for ((i=1; $i<=$#argv; i++)); do
		if [[ $argv[$i] =~ '^-?-h(elp)?$' ]]; then
			has_help=1
			argv[$i]=()
			break
		fi
	done

	# Some commands don't need a machine.
	local no_mach=(help ls list machines)
	if [[ ${no_mach[(r)$argv[1]]:-} = $argv[1] ]]; then
		(( $has_help )) && help '' $argv[1]
		cmd-$argv[1] $argv[2,-1]
		return 0
	fi

	[[ -z ${argv[1]:-} ]] && help 'machine missing'
	[[ -z ${argv[2]:-} ]] && help 'command missing'

	# Allow both "freebsd start" and "start freebsd"
	local machine=$argv[1]
	local cmd=$argv[2]
	if has-machine $cmd; then
		machine=$argv[2]
		cmd=$argv[1]
	fi
	shift 2

	(( $has_help )) && help '' $cmd

	read-machine $machine

	typeset -f cmd-$cmd >/dev/null || help "unknown command: $cmd"
	cmd-$cmd $argv
}

# Read the config; sets globals.
read-machine() {
	typeset -g machine=$1
	local nowarn=${2:-}

	# Defaults.
	typeset -g ssh_user=$USER
	typeset -g ssh_host=localhost
	typeset -g ssh_port=22

	has-machine $machine || help "machine $machine doesn't exist; known machines:\n    $(list-machines)"
	source $root/machines/$machine

	[[ -z ${platform:-} ]] && typeset -g platform=${machine%%-*}
	case $platform in
		(freebsd|openbsd|netbsd|windows|macos|illumos|dragonfly) ;;
		(aix|solaris)
			[[ -z $nowarn ]] && print >&2 "$progname: warning: $platform is untested (but *should* work, hopefully)" ;;
		(android|ios|plan9)
			[[ -z $nowarn ]] && print >&2 "$progname: warning: $platform is not supported yet; continuing anyway" ;;
		(*) help "unknown platform $platform"
	esac
}

# Override ssh to add in our port, user, and host.
ssh() {
	=ssh -p $ssh_port $ssh_user@$ssh_host ${ssh_opts:-} $@
}

# And scp too.
scp() {
	# -C: compression
	# -p: preserve mtime, atime, mode
	# -r: recursively follow dirs
	=scp -CprP $ssh_port $@
}

# Check that the commands we require actually exist.
has-commands() {
	e=0
	for t in ssh scp; do
		if (( ! $+commands[$t] )); then
			print >&2 "$progname: required command '$t' not in \$PATH"
			e=1
		fi
	done
	return $e
}

# List all machines.
list-machines() {
	(cd $root/machines && print -r -- *~*.md)
}

# Do we have this machine?
has-machine() {
	[[ -f $root/machines/$1 ]]
}

# Wait for ssh to be available.
wait-ssh() {
	local cmd=true
	[[ $platform = windows ]] && cmd=rem

	print -n "$progname: waiting for ssh to be available at $ssh_host:$ssh_port â€¦ "
	while :; do
		check-status && break
		sleep 0.5
	done
	print 'Okay'
}

get-version() {
	# TODO: output of "wmic os get" is a bit ugly, but best we can do atm
	#       (findstr doesn't support "grep -o"). PowerShell can do more; not
	#       sure how/why it doesn't just start powershell by default.
	#       https://stackoverflow.com/a/40781043/660921
	case $platform in
		(windows) ssh "wmic os get Version /VALUE | findstr \"[^=][0-9.]*\"" ;;
		(macos)   ssh "echo \"\$(sw_vers | cut -d : -f 2 | tr -d '\t' | tr '\n' ' ')\"" ;;
		(*)       ssh "uname -sr"
	esac
}


###
### QEMU support
###

has-qemu() {
	local arch=$1
	if (( ! $+commands[qemu-system-$arch] )); then
		print >&2 "$progname: qemu-system-$arch not in \$PATH; can't start QEMU"
		exit 1
	fi
}

# Run QEMU.
run-qemu() {
	# This doesn't work because it uses an assoc array for the qemu parameters,
	# but it can have multiple of the same (e.g. -device ...), so that doesn't
	# actually work. Keep it for now; probably want something like this at some
	# point.
	print "run-qemu doesn't work"
	exit 99

	local arch=$1
	local img=$2
	local pid=$3
	local ssh_ip=$(resolve-host $ssh_host)
	shift 3

	if (( ! $+commands[qemu-system-$arch] )); then
		print >&2 "$progname: qemu-system-$arch not in \$PATH; can't start QEMU"
		return 1
	fi

	mkdir -p $root/run
	if has-pid $pid; then
		print "$progname: $machine already started; nothing to do"
		return 0
	fi

	typeset -A args=(
		-enable-kvm ''
		-cpu        'host,kvm=on'
		-smp        'cores=2,threads=1,sockets=1'
		-m          '2G'
		-name       "$machine"
		-pidfile    "$pid"
		-display    "none"
		-device     "virtio-blk-pci,drive=SystemDisk"
		-drive      "id=SystemDisk,if=none,file=$img,format=qcow2"
		-device     'e1000,netdev=mynet0'
		-netdev     "user,id=mynet0,hostfwd=tcp:$ssh_ip:$ssh_port-:22"
	)
	typeset -A extra=($argv)
	for k in ${(k)extra}; args[$k]=$extra[$k]

	#for k in ${(k)args}; print -f "%-20s = %s\n" -- $k ${args[$k]}

	local cmd=(qemu-system-$arch ${(kv)args})
	$cmd

	#$k     =>    ${cmd[$k:q]:-}"

	#print -- $cmd
	#print
	#print -- $argv
	#${cmd[@]}
}

# Check if the pidfile $1 exists, and (optionally) if the PID matches the
# command $2.
has-pid() {
	local pidfile=$1
	local cmd=${2:-}

	[[ ! -f $pidfile ]] && return 1

	local proc=$(ps -q $(< $pidfile) -o comm=)

	# No process: probably left over PID file, just remove.
	if [[ -z $proc ]]; then
		print >&2 "$progname: pidfile $pidfile exists, but no such process; removing pidfile and continueing"
		rm $pidfile
		return 1
	fi

	# Check this PID is what we expect. In case of crashes or whatnot the
	# pidfile may remain, and the PID could have been re-used by another
	# process. It's rare, but I've seen it happen and it's VERY confusing when
	# it does.
	if [[ $cmd != '' && $proc != $cmd ]]; then
		print >&2 "$progname: pidfile $pidfile exists, but PID $(< $pidfile) doesn't seem to be '$cmd'; bailing out"
		exit 1
	fi

	return 0
}

# Lookup host; zsh doesn't really expose anything for this as far as I can find,
# so try a bunch of things. Note dig/host/nslookup/drill ignores /etc/hosts; we
# can't use it.
resolve-host() {
	local host=$1

	if (( $+commands[getent] )); then
		local x=($(getent hosts $host))
		print -r -- $x[1]
	elif (( $+commands[systemd-resolve] )); then
		# TODO
		# systemd-resolve $host -t A             | awk '{print $4; exit}'
		# systemd-resolve $host -t A --legend=no | awk '{print $4; exit}'
	elif (( $+commands[python] )); then
		python -c "import socket; print(socket.gethostbyname('$host'))" # TODO: escape '
	elif (( $+commands[ruby] )); then
		ruby -rresolv -e "puts(Resolv.getaddress('$host'))" # TODO: escape '
	elif (( $+commands[perl] )); then
		perl -MSocket -MNet::hostent -E 'say inet_ntoa((gethost shift)->addr)' $host
	elif (( $+commands[php] )); then
		php -r "print(gethostbyname('$host'));"  # TODO: escape '
	elif (( $+commands[nc] )); then
		nc -vNdw 1 $host 1 |& grep -Eo '\([0-9a-f.:]{7,}\)' | tr -d '()'
	elif (( $+commands[ping] )); then
		local p=$(ping $host -q -c1 -w1 -W1) # quiet, count, timeout, linger
		if (( $? > 0 )); then
			print >&2 -r -- $p
			return $?
		fi
		<<<$p head -n1 | grep -Eo '\([0-9a-f.:]{7,}\)' | tr -d '()'
	else
		print >&2 'resolve-host: no facility to get IP address from host'
		return 1
	fi
}

if [[ $zsh_eval_context = 'toplevel' ]]; then
	main $argv[@]
fi
