#!/usr/bin/env zsh
[ "${ZSH_VERSION:-}" = "" ] && echo >&2 "Only works with zsh" && exit 1
setopt err_exit no_unset pipefail extended_glob

root=$0:P:h
progname=$0:t
dir=$PWD:t

for f in $root/cmd/*; source $f

main() {
	has-commands || exit $?
	(( $#argv == 0 )) && help ''

	# Check for -h/-help in any position.
	local has_help=0
	for ((i=1; $i<=$#argv; i++)); do
		if [[ $argv[$i] =~ '^-?-h(elp)?$' ]]; then
			has_help=1
			argv[$i]=()
			break
		fi
	done

	# Some commands don't need a machine.
	local no_mach=(help ls list machines new)
	if [[ ${no_mach[(r)$argv[1]]:-} = $argv[1] ]]; then
		(( $has_help )) && help '' $argv[1]
		cmd-$argv[1] $argv[2,-1]
		return 0
	fi

	[[ -z ${argv[1]:-} ]] && help 'machine missing'
	[[ -z ${argv[2]:-} ]] && help 'command missing'

	# Allow both "freebsd start" and "start freebsd"
	local machine=$argv[1]
	local cmd=$argv[2]
	if has-machine $cmd; then
		machine=$argv[2]
		cmd=$argv[1]
	fi
	shift 2

	(( $has_help )) && help '' $cmd

	read-machine $machine

	typeset -f cmd-$cmd >/dev/null || help "unknown command: $cmd"
	cmd-$cmd $argv
}

# Read the config; sets globals.
read-machine() {
	typeset -g machine=$1
	local nowarn=${2:-}

	# Defaults.
	typeset -g ssh_user=$USER
	typeset -g ssh_host=localhost
	typeset -g ssh_port=22

	has-machine $machine || help "machine $machine doesn't exist; known machines:\n    $(list-machines)"
	source $root/machines/$machine

	[[ -z ${platform:-} ]] && typeset -g platform=${machine%%-*}
	case $platform in
		(freebsd|openbsd|netbsd|windows|macos|illumos|dragonfly) ;;
		(aix|solaris)
			[[ -z $nowarn ]] && print >&2 "$progname: warning: $platform is untested (but *should* work, hopefully)" ;;
		(android|ios|plan9)
			[[ -z $nowarn ]] && print >&2 "$progname: warning: $platform is not supported yet; continuing anyway" ;;
		(*) help "unknown platform $platform"
	esac
}

# Override ssh to add in our port, user, and host.
ssh() {
	=ssh -p $ssh_port $ssh_user@$ssh_host ${ssh_opts:-} $@
}

# And scp too.
scp() {
	# -C: compression
	# -p: preserve mtime, atime, mode
	# -r: recursively follow dirs
	=scp -CprP $ssh_port $@
}

# Check that the commands we require actually exist.
has-commands() {
	e=0
	for t in ssh scp; do
		if (( ! $+commands[$t] )); then
			print >&2 "$progname: required command '$t' not in \$PATH"
			e=1
		fi
	done
	return $e
}

# List all machines.
list-machines() {
	(cd $root/machines && print -r -- *~*.md)
}

# Do we have this machine?
has-machine() {
	[[ -f $root/machines/$1 ]]
}

# Wait for ssh to be available.
wait-ssh() {
	local cmd=true
	[[ $platform = windows ]] && cmd=rem

	print -n "$progname: waiting for ssh to be available at $ssh_host:$ssh_port â€¦ "
	while :; do
		check-status && break
		sleep 0.5
	done
	print 'Okay'
}

get-version() {
	# TODO: output of "wmic os get" is a bit ugly, but best we can do atm
	#       (findstr doesn't support "grep -o"). PowerShell can do more; not
	#       sure how/why it doesn't just start powershell by default.
	#       https://stackoverflow.com/a/40781043/660921
	case $platform in
		(windows) ssh "wmic os get Version /VALUE | findstr \"[^=][0-9.]*\"" ;;
		(macos)   ssh "echo \"\$(sw_vers | cut -d : -f 2 | tr -d '\t' | tr '\n' ' ')\"" ;;
		(*)       ssh "uname -sr"
	esac
}


###
### QEMU support
###

has-qemu() {
	local arch=$1
	if (( ! $+commands[qemu-system-$arch] )); then
		print >&2 "$progname: qemu-system-$arch not in \$PATH; can't start QEMU"
		exit 1
	fi
}

# Run QEMU.
run-qemu() {
	# This doesn't work because it uses an assoc array for the qemu parameters,
	# but it can have multiple of the same (e.g. -device ...), so that doesn't
	# actually work. Keep it for now; probably want something like this at some
	# point.
	# print "run-qemu doesn't work"
	# exit 99

	# typeset -A extra=($argv)
	# for k in ${(k)extra}; args[$k]=$extra[$k]
	#for k in ${(k)args}; print -f "%-20s = %s\n" -- $k ${args[$k]}

	use_display=$argv[1] ; shift
	iso=$argv[1]         ; shift
	platform=$argv[1]    ; shift
	version=$argv[1]     ; shift
	ssh_port=$argv[1]    ; shift
	memory=$argv[1]      ; shift
	cores=$argv[1]       ; shift
	threads=$argv[1]     ; shift
	arch=$argv[1]        ; shift
	cpu=($argv[1])       ; shift
	extra=($argv)

	# printf "%-20s %s\n" "use_display" $use_display
	# printf "%-20s %s\n" "iso" $iso
	# printf "%-20s %s\n" "version" $version
	# printf "%-20s %s\n" "ssh_port" $ssh_port
	# printf "%-20s %s\n" "memory" $memory
	# printf "%-20s %s\n" "cores" $cores
	# printf "%-20s %s\n" "threads" $threads
	# printf "%-20s %s\n" "arch" $arch
	# printf "%-20s %s\n" "cpu" ${(j:,:)cpu}

	has-qemu $arch || return 1

	mkdir -p $root/run
	if has-pid $pid; then
		print "$progname: $machine already started; nothing to do"
		return 0
	fi

	local display=(-display 'none')
	(( $use_display )) && display=(
		-display    'gtk,grab-on-hover=off,zoom-to-fit=off'
		-device     'VGA,vgamem_mb=64'
		# Prevents the mouse from being grabbed when clicking in the guest; QEMU
		# will be able to report the mouse position without having to grab it.
		# Also overrides PS/2 mouse emulation when activated.
		-device     'usb-tablet,bus=input.0'
	)

	# Add installer CD if it exists
	local install=()
	[[ -n $iso ]] && install=(
		-cdrom   "$iso"
		-boot    'd'
	)

	print "$progname: starting QEMU VM from $img:t"
	local cmd=(qemu-system-$arch
		-name       "$machine,process=$procname"
		-pidfile    "$pid"
		-enable-kvm
		-machine    'q35,smm=off,vmport=off'
		-rtc        'base=localtime,clock=host,driftfix=slew'
		-m          "$memory"
		-smp        "cores=$cores,threads=$threads,sockets=1"
		-cpu        "host,kvm=on$( (( $#cpu )) && print ',' )${(j:,:)cpu}"
		-device     'usb-ehci,id=input'
		-smbios     "type=2,manufacturer=goon,product=goon,version=3.16,serial=0xDEADBEEF,location=arp242.net,asset=$machine"

		# Hard drive
		-device     'virtio-blk-pci,drive=SystemDisk'
		-drive      "id=SystemDisk,if=none,file=$img,format=qcow2"

		$display
		$install
	)

	# Seems to break networking.
	[[ $platform != illumos ]] && cmd+=(-device 'virtio-balloon')

	# Networking.
	cmd+=(-netdev "user,id=nic,hostname=$machine,hostfwd=tcp:$ssh_ip:$ssh_port-:22")
	if [[ $platform = illumos ]]; then
		cmd+=(-device 'e1000,netdev=nic') # Can't get virtio to work
	else
		cmd+=(-device 'virtio-net,netdev=nic')
	fi

	# Add extra vars
	cmd+=($extra)

	print $cmd
	# ${cmd[@]} &
}

# Check if the pidfile $1 exists, and (optionally) if the PID matches the
# command $2.
has-pid() {
	local pidfile=$1
	local cmd=${2:-}

	[[ ! -f $pidfile ]] && return 1

	local proc=$(ps -q $(< $pidfile) -o comm=)

	# No process: probably left over PID file, just remove.
	if [[ -z $proc ]]; then
		print >&2 "$progname: pidfile $pidfile exists, but no such process; removing pidfile and continueing"
		rm $pidfile
		return 1
	fi

	# Check this PID is what we expect. In case of crashes or whatnot the
	# pidfile may remain, and the PID could have been re-used by another
	# process. It's rare, but I've seen it happen and it's VERY confusing when
	# it does.
	if [[ $cmd != '' && $proc != $cmd ]]; then
		print >&2 "$progname: pidfile $pidfile exists, but PID $(< $pidfile) doesn't seem to be '$cmd'; bailing out"
		exit 1
	fi

	return 0
}

# Lookup host; zsh doesn't really expose anything for this as far as I can find,
# so try a bunch of things. Note dig/host/nslookup/drill ignores /etc/hosts; we
# can't use it.
#
# Returns 0 on success, 1 on resolve failure, or 2 if there is no facility to
# resolve the name.
resolve-host() {
	setopt local_options no_err_exit pipefail
	local host=$1

	if (( $+commands[getent] )); then
		local x=($(getent hosts $host))
		(( $#x == 0 )) && return 1
		print -r -- $x[1]
	elif (( $+commands[resolveip] )); then  # MariaDB installs this.
		resolveip -s arp242.net 2>/dev/null || return 1
	elif (( $+commands[python] )); then
		python -c "import socket; print(socket.gethostbyname('$host'))" 2>/dev/null || return 1
	elif (( $+commands[perl] )); then
		perl -MSocket -MNet::hostent -E 'say inet_ntoa((gethost shift)->addr)' $host 2>/dev/null || return 1
	elif (( $+commands[ruby] )); then
		ruby -rresolv -e "puts(Resolv.getaddress('$host'))" 2>/dev/null || return 1
	elif (( $+commands[php] )); then
		php -r "print(gethostbyname('$host') . \"\\n\");" || return 1
	# There are different versions of nc with incompatible flags; disable until
	# I figure out how to detect this. It's also slow as it takes 1s to connect,
	# so may not be worth keeping anyway.
	# elif (( $+commands[nc] )); then
	# 	nc -vNdw 1 $host 1 |& grep -Eo '\([0-9a-f.:]{7,}\)' | tr -d '()'
	elif (( $+commands[ping] )); then
		local x=$(ping $host -q -c1 -w1 -W1 2>/dev/null) # quiet, count, timeout, linger
		(( $? > 0 )) && return $?
		print -r -- ${${x/)*/}/*\(/}
	elif (( $+commands[systemd-resolve] )); then
		# Do this last, as it may not work:
		#
		#   % systemd-resolve --legend=no -tA example.com
		#   example.com: resolve call failed: Unit dbus-org.freedesktop.resolve1.service not found.
		#
		# On Debian I need to install libnss-resolve to make it work, which
		# isn't installed by default.
		local x=($(systemd-resolve --legend=no -tA example.com 2>/dev/null))
		(( $#x == 0 )) && return 1
		print -r -- $x[4]
	else
		print >&2 'resolve-host: no facility to get IP address from host'
		return 2
	fi
}

if [[ $zsh_eval_context = 'toplevel' ]]; then
	main $argv[@]
fi
